apply plugin: 'java-library'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'io.codearte.nexus-staging'

apply plugin: "me.champeau.gradle.jmh"

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = "com.github.protobufel"
archivesBaseName = "multikeymapjava"
version = '0.4.1'

if (project.hasProperty('ossrhUsername')) {
	uploadArchives {
	  repositories {
	    mavenDeployer {
	      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
	
	      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
	        authentication(userName: ossrhUsername, password: ossrhPassword)
	      }
	
	      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
	        authentication(userName: ossrhUsername, password: ossrhPassword)
	      }
	
	      pom.project {
	        name 'multikeymapjava'
	        packaging 'jar'
	        description 'Java 8 implementation of the multi-key map. It behaves like a regular generic Map with the additional ability of getting its values by any combination of partial keys.'
	        url 'https://github.com/protobufel/multikeymapjava'
	
	        scm {
	          connection 'scm:git:https://github.com/protobufel/multikeymapjava.git'
	          developerConnection 'scm:git@github.com:protobufel/multikeymapjava.git'
	          url 'https://github.com/protobufel/multikeymapjava'
	        }
	
	        licenses {
	          license {
	            name 'The Apache License, Version 2.0'
	            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
	          }
	        }
	
	        developers {
	          developer {
	            id 'protobufel'
	            name 'David Tesler'
	            email 'protobufel@gmail.com'
	          }
	        }
	      }
	    }
	  }
	}
	
	nexusStaging {
	    packageGroup = "com.github.protobufel.multikeymapjava" //optional if packageGroup == project.getGroup()
	    stagingProfileId = "com.github.protobufel" //when not defined will be got from server using "packageGroup"
	}
	
	task sourcesJar(type: Jar) {
	 	onlyIf { project.hasProperty('ossrhUsername') }
	    classifier = 'sources'
	    from sourceSets.main.allSource
	}
	
	signing {
	    sign configurations.archives
	}

	task javadocJar(type: Jar) {
		onlyIf { project.hasProperty('ossrhUsername') }
	    classifier = 'javadoc'
	    from javadoc
	}

	task copyJavadocToDoc(type: Copy) {
		dependsOn javadoc
		from ("build/docs/javadoc")
		into ("docs/javadoc")	
	}
	
	artifacts {
	    archives javadocJar, sourcesJar
	}
} else {
	test {
	    testLogging {
	        events "PASSED", "FAILED", "SKIPPED"
	        exceptionFormat "short"
	
	        debug {
	            events "skipped", "failed"
	            exceptionFormat "full"
	        }
	
	        info.events = ["failed", "skipped"]
	    }
	}
}

jar {
    manifest {
        attributes('Implementation-Title': project.name,
                   'Implementation-Version': project.version)
    }
}

repositories {
    jcenter()
    mavenCentral()
}

buildscript {
  repositories {
    jcenter()
	mavenCentral()
	//maven { url "http://oss.sonatype.org/content/repositories/snapshots/" }
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "me.champeau.gradle:jmh-gradle-plugin:0.3.1"
    classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.9.0"
  }
}

jmh {
   jmhVersion = '1.19' // Specifies JMH version
   includeTests = false // Allows to include test sources into generate JMH jar, i.e. use it when benchmarks depend on the test classes.
   duplicateClassesStrategy = 'fail' // Strategy to apply when encountring duplicate classes during creation of the fat jar (i.e. while executing jmhJar task)
}

dependencies {
    //api '...'

    implementation 'org.openjdk.jmh:jmh-core:1.19'
	
    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.assertj:assertj-core:3.8.0'
    testImplementation 'com.google.guava:guava:22.0'
    testImplementation 'com.google.guava:guava-testlib:22.0'
    
    //jmh 'org.openjdk.jmh:jmh-core:1.19'
    //jmh 'org.openjdk.jmh:jmh-generator-annprocess:1.19'
}
